#include <Servo.h>

// Arduino pin assignment
#define PIN_LED 9   
#define PIN_SERVO 10 
#define PIN_IR A0 

// Framework setting
#define _DIST_TARGET 275// 목표 위치가 25.5cm임을 선언
#define _DIST_MIN 100
#define _DIST_MAX 410

// Distance sensor
#define _DIST_ALPHA 0.1   

// Servo range
#define _DUTY_MIN  553   
#define _DUTY_NEU 1481        
#define _DUTY_MAX 2399  

// Servo speed control
#define _SERVO_ANGLE 20        // servo 각도 설정
#define _SERVO_SPEED 300       //  servo 속도 설정
#define INTERVAL 500
#define _POS_START (_DUTY_MIN + 100)

// Event periods
#define _INTERVAL_DIST 20      // distance 측정 이벤트 주기
#define _INTERVAL_SERVO 10     // servo 조정 이벤트 주기
#define _INTERVAL_SERIAL 100   // serial 출력 이벤트 주기

// PID parameters
#define _KP 5.8
#define _KD 475//399.5
//////////////////////
// global variables //
//////////////////////

float timeout; // unit: us
float dist_min, dist_max, dist_prev, EMA_k, alpha, filtered_dist, servo_EMA_k; // unit: mm
float scale; // used for pulse duration to distance conversion
int angle_value[180] ; 
int angleSecond ;
float servo_speed,servo_ang;
float dist_write;
Servo myservo; 

// Distance sensor
float dist_target= 255 ; // location to send the ball
float dist_ema;
float raw_dist = 0.0;
float dist_cali;
int a, b; // unit: mm


float dist_servo;

// Event periods
unsigned long last_sampling_time_dist, last_sampling_time_servo, last_sampling_time_serial; 
bool event_dist, event_servo, event_serial;

// Servo speed control
int duty_chg_per_interval; 
int duty_target, duty_curr;

// PID variables
float error_curr, error_prev, control, pterm, dterm, iterm;

void setup() {
// initialize GPIO pins for LED and attach servo 
 pinMode(PIN_LED,OUTPUT);
 digitalWrite(PIN_LED, 1);



// initialize global variables
  dist_min = _DIST_MIN;
  dist_max = _DIST_MAX; 
  timeout = (INTERVAL / 2) * 1000.0; 
  raw_dist = dist_prev = 0.0;
  angleSecond = 553;
  alpha = _DIST_ALPHA;
  filtered_dist = 0.0;
// move servo to neutral position
 myservo.attach(PIN_SERVO); 
 myservo.writeMicroseconds(_DUTY_NEU); 
 duty_target = duty_curr = _POS_START  ;

 servo_ang =  _SERVO_ANGLE ;
 servo_speed = _SERVO_SPEED ;   
 
 Serial.begin(57600); 
 last_sampling_time_dist = millis();
 last_sampling_time_servo = millis();
 last_sampling_time_serial = millis();

 a = 67.8;
 b = 291;
 
// convert angle speed into duty change per interval.
  duty_chg_per_interval = (_DUTY_MAX - _DUTY_MIN) * ((float)_SERVO_SPEED / 180) * ((float)_INTERVAL_SERVO / 1000); 
}
//loop-----------------------------------------------------------------------------------------------------------------------------
void loop() {
/////////////////////
// Event generator // 이벤트 실행 간격 구현 
/////////////////////
  if (millis() >= last_sampling_time_dist + _INTERVAL_DIST) event_dist = true;
  if (millis() >= last_sampling_time_servo + _INTERVAL_SERVO) event_servo = true;
  if (millis() >= last_sampling_time_serial + _INTERVAL_SERIAL) event_serial = true;


  if(event_dist) {
    event_dist = false; 
    raw_dist = ir_distance();  
        
    dist_ema = (alpha*raw_dist) + (1 - alpha)*EMA_k; //EMA값을 계산
    EMA_k = dist_ema; // 이전 EMA값을 저장
    dist_cali = 100 + 300.0 / (b - a) * (dist_ema - a)-10;
    filtered_dist =  dist_cali; //적외선 센서 필터링 값 저장

  // PID control logic
    error_curr = _DIST_TARGET - filtered_dist; //현재 오차 저장
    pterm = error_curr *_KP; //kp * 오차 
    dterm = _KD * (error_curr - error_prev);
    control = dterm + pterm; // 제어량 계산
    duty_target = _DUTY_NEU + control;
    error_prev = error_curr;
  
    
    if (duty_target  > _DUTY_MAX) duty_target = _DUTY_MAX;
    if (duty_target  < _DUTY_MIN) duty_target  = _DUTY_MIN; 
    
    last_sampling_time_dist = millis(); // 마지막 dist event 처리 시각 기록
  }
  
  if(event_servo) {
    event_servo = false; // 
    if(duty_target  > duty_curr) {
      duty_curr += duty_chg_per_interval;
      if(duty_curr > duty_target)duty_curr = duty_target ;
    }
    else if(duty_target  < duty_curr){
       duty_curr -= duty_chg_per_interval;
       if(duty_curr < duty_target) duty_curr =duty_target ;
    }
    else{
      duty_curr = duty_curr;
    }
    myservo.writeMicroseconds(duty_curr);
    last_sampling_time_servo = millis(); // 마지막 servo event 처리 시각 기록    
  }
  
  if(event_serial){
    event_serial = false;
    Serial.print("dist_ir:");
    Serial.print(dist_ema);
    Serial.print(",pterm:");
    Serial.print(map(pterm,-1000,1000,510,610));
    Serial.print(",dterm:");
    Serial.print(map(dterm,-1000,1000,510,610));
    Serial.print(",duty_target:");
    Serial.print(map(duty_target,1000,2000,410,510));
    Serial.print(",duty_curr:");
    Serial.print(map(duty_curr,1000,2000,410,510));
    Serial.println(",Min:100,Low:200,dist_target:255,High:310,Max:410");
    last_sampling_time_serial = millis();
  } 
}

float ir_distance(void){ // return value unit: mm 
  float val;
  float volt = float(analogRead(PIN_IR));
  val = ((6762.0/(volt-9.0))-4.0) * 10.0;
  return val;
  //적외선 센서 거리 측정
}
